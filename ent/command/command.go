// Code generated by entc, DO NOT EDIT.

package command

import (
	"time"
)

const (
	// Label holds the string label denoting the command type in the database.
	Label = "command"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKeyword holds the string denoting the keyword field in the database.
	FieldKeyword = "keyword"
	// FieldDetail holds the string denoting the detail field in the database.
	FieldDetail = "detail"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldServer holds the string denoting the server field in the database.
	FieldServer = "server"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// EdgeLogs holds the string denoting the logs edge name in mutations.
	EdgeLogs = "logs"
	// Table holds the table name of the command in the database.
	Table = "commands"
	// LogsTable is the table that holds the logs relation/edge. The primary key declared below.
	LogsTable = "command_logs"
	// LogsInverseTable is the table name for the ResultLog entity.
	// It exists in this package in order to avoid circular dependency with the "resultlog" package.
	LogsInverseTable = "result_logs"
)

// Columns holds all SQL columns for command fields.
var Columns = []string{
	FieldID,
	FieldKeyword,
	FieldDetail,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreator,
	FieldServer,
	FieldCode,
}

var (
	// LogsPrimaryKey and LogsColumn2 are the table columns denoting the
	// primary key for the logs relation (M2M).
	LogsPrimaryKey = []string{"command_id", "result_log_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// KeywordValidator is a validator for the "keyword" field. It is called by the builders before save.
	KeywordValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	CreatorValidator func(string) error
	// ServerValidator is a validator for the "server" field. It is called by the builders before save.
	ServerValidator func(string) error
)
