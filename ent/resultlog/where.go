// Code generated by entc, DO NOT EDIT.

package resultlog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dictor/jaeminbot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// Log applies equality check predicate on the "log" field. It's identical to LogEQ.
func Log(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLog), v))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...string) predicate.ResultLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResultLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...string) predicate.ResultLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResultLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLevel), v))
	})
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLevel), v))
	})
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLevel), v))
	})
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLevel), v))
	})
}

// LevelContains applies the Contains predicate on the "level" field.
func LevelContains(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLevel), v))
	})
}

// LevelHasPrefix applies the HasPrefix predicate on the "level" field.
func LevelHasPrefix(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLevel), v))
	})
}

// LevelHasSuffix applies the HasSuffix predicate on the "level" field.
func LevelHasSuffix(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLevel), v))
	})
}

// LevelEqualFold applies the EqualFold predicate on the "level" field.
func LevelEqualFold(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLevel), v))
	})
}

// LevelContainsFold applies the ContainsFold predicate on the "level" field.
func LevelContainsFold(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLevel), v))
	})
}

// LogEQ applies the EQ predicate on the "log" field.
func LogEQ(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLog), v))
	})
}

// LogNEQ applies the NEQ predicate on the "log" field.
func LogNEQ(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLog), v))
	})
}

// LogIn applies the In predicate on the "log" field.
func LogIn(vs ...string) predicate.ResultLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResultLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLog), v...))
	})
}

// LogNotIn applies the NotIn predicate on the "log" field.
func LogNotIn(vs ...string) predicate.ResultLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResultLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLog), v...))
	})
}

// LogGT applies the GT predicate on the "log" field.
func LogGT(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLog), v))
	})
}

// LogGTE applies the GTE predicate on the "log" field.
func LogGTE(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLog), v))
	})
}

// LogLT applies the LT predicate on the "log" field.
func LogLT(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLog), v))
	})
}

// LogLTE applies the LTE predicate on the "log" field.
func LogLTE(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLog), v))
	})
}

// LogContains applies the Contains predicate on the "log" field.
func LogContains(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLog), v))
	})
}

// LogHasPrefix applies the HasPrefix predicate on the "log" field.
func LogHasPrefix(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLog), v))
	})
}

// LogHasSuffix applies the HasSuffix predicate on the "log" field.
func LogHasSuffix(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLog), v))
	})
}

// LogEqualFold applies the EqualFold predicate on the "log" field.
func LogEqualFold(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLog), v))
	})
}

// LogContainsFold applies the ContainsFold predicate on the "log" field.
func LogContainsFold(v string) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLog), v))
	})
}

// HasCommand applies the HasEdge predicate on the "command" edge.
func HasCommand() predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommandTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CommandTable, CommandPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommandWith applies the HasEdge predicate on the "command" edge with a given conditions (other predicates).
func HasCommandWith(preds ...predicate.Command) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommandInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CommandTable, CommandPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResultLog) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResultLog) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResultLog) predicate.ResultLog {
	return predicate.ResultLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
