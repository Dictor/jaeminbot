// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dictor/jaeminbot/ent/command"
	"github.com/dictor/jaeminbot/ent/predicate"
	"github.com/dictor/jaeminbot/ent/resultlog"
)

// ResultLogUpdate is the builder for updating ResultLog entities.
type ResultLogUpdate struct {
	config
	hooks    []Hook
	mutation *ResultLogMutation
}

// Where appends a list predicates to the ResultLogUpdate builder.
func (rlu *ResultLogUpdate) Where(ps ...predicate.ResultLog) *ResultLogUpdate {
	rlu.mutation.Where(ps...)
	return rlu
}

// SetLevel sets the "level" field.
func (rlu *ResultLogUpdate) SetLevel(s string) *ResultLogUpdate {
	rlu.mutation.SetLevel(s)
	return rlu
}

// SetLog sets the "log" field.
func (rlu *ResultLogUpdate) SetLog(s string) *ResultLogUpdate {
	rlu.mutation.SetLog(s)
	return rlu
}

// AddCommandIDs adds the "command" edge to the Command entity by IDs.
func (rlu *ResultLogUpdate) AddCommandIDs(ids ...string) *ResultLogUpdate {
	rlu.mutation.AddCommandIDs(ids...)
	return rlu
}

// AddCommand adds the "command" edges to the Command entity.
func (rlu *ResultLogUpdate) AddCommand(c ...*Command) *ResultLogUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rlu.AddCommandIDs(ids...)
}

// Mutation returns the ResultLogMutation object of the builder.
func (rlu *ResultLogUpdate) Mutation() *ResultLogMutation {
	return rlu.mutation
}

// ClearCommand clears all "command" edges to the Command entity.
func (rlu *ResultLogUpdate) ClearCommand() *ResultLogUpdate {
	rlu.mutation.ClearCommand()
	return rlu
}

// RemoveCommandIDs removes the "command" edge to Command entities by IDs.
func (rlu *ResultLogUpdate) RemoveCommandIDs(ids ...string) *ResultLogUpdate {
	rlu.mutation.RemoveCommandIDs(ids...)
	return rlu
}

// RemoveCommand removes "command" edges to Command entities.
func (rlu *ResultLogUpdate) RemoveCommand(c ...*Command) *ResultLogUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rlu.RemoveCommandIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlu *ResultLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rlu.hooks) == 0 {
		affected, err = rlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResultLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rlu.mutation = mutation
			affected, err = rlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rlu.hooks) - 1; i >= 0; i-- {
			if rlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rlu *ResultLogUpdate) SaveX(ctx context.Context) int {
	affected, err := rlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlu *ResultLogUpdate) Exec(ctx context.Context) error {
	_, err := rlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlu *ResultLogUpdate) ExecX(ctx context.Context) {
	if err := rlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rlu *ResultLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resultlog.Table,
			Columns: resultlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resultlog.FieldID,
			},
		},
	}
	if ps := rlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rlu.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resultlog.FieldLevel,
		})
	}
	if value, ok := rlu.mutation.Log(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resultlog.FieldLog,
		})
	}
	if rlu.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resultlog.CommandTable,
			Columns: resultlog.CommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.RemovedCommandIDs(); len(nodes) > 0 && !rlu.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resultlog.CommandTable,
			Columns: resultlog.CommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resultlog.CommandTable,
			Columns: resultlog.CommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resultlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ResultLogUpdateOne is the builder for updating a single ResultLog entity.
type ResultLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResultLogMutation
}

// SetLevel sets the "level" field.
func (rluo *ResultLogUpdateOne) SetLevel(s string) *ResultLogUpdateOne {
	rluo.mutation.SetLevel(s)
	return rluo
}

// SetLog sets the "log" field.
func (rluo *ResultLogUpdateOne) SetLog(s string) *ResultLogUpdateOne {
	rluo.mutation.SetLog(s)
	return rluo
}

// AddCommandIDs adds the "command" edge to the Command entity by IDs.
func (rluo *ResultLogUpdateOne) AddCommandIDs(ids ...string) *ResultLogUpdateOne {
	rluo.mutation.AddCommandIDs(ids...)
	return rluo
}

// AddCommand adds the "command" edges to the Command entity.
func (rluo *ResultLogUpdateOne) AddCommand(c ...*Command) *ResultLogUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rluo.AddCommandIDs(ids...)
}

// Mutation returns the ResultLogMutation object of the builder.
func (rluo *ResultLogUpdateOne) Mutation() *ResultLogMutation {
	return rluo.mutation
}

// ClearCommand clears all "command" edges to the Command entity.
func (rluo *ResultLogUpdateOne) ClearCommand() *ResultLogUpdateOne {
	rluo.mutation.ClearCommand()
	return rluo
}

// RemoveCommandIDs removes the "command" edge to Command entities by IDs.
func (rluo *ResultLogUpdateOne) RemoveCommandIDs(ids ...string) *ResultLogUpdateOne {
	rluo.mutation.RemoveCommandIDs(ids...)
	return rluo
}

// RemoveCommand removes "command" edges to Command entities.
func (rluo *ResultLogUpdateOne) RemoveCommand(c ...*Command) *ResultLogUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rluo.RemoveCommandIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rluo *ResultLogUpdateOne) Select(field string, fields ...string) *ResultLogUpdateOne {
	rluo.fields = append([]string{field}, fields...)
	return rluo
}

// Save executes the query and returns the updated ResultLog entity.
func (rluo *ResultLogUpdateOne) Save(ctx context.Context) (*ResultLog, error) {
	var (
		err  error
		node *ResultLog
	)
	if len(rluo.hooks) == 0 {
		node, err = rluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResultLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rluo.mutation = mutation
			node, err = rluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rluo.hooks) - 1; i >= 0; i-- {
			if rluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rluo *ResultLogUpdateOne) SaveX(ctx context.Context) *ResultLog {
	node, err := rluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rluo *ResultLogUpdateOne) Exec(ctx context.Context) error {
	_, err := rluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rluo *ResultLogUpdateOne) ExecX(ctx context.Context) {
	if err := rluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rluo *ResultLogUpdateOne) sqlSave(ctx context.Context) (_node *ResultLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resultlog.Table,
			Columns: resultlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resultlog.FieldID,
			},
		},
	}
	id, ok := rluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResultLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resultlog.FieldID)
		for _, f := range fields {
			if !resultlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resultlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rluo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resultlog.FieldLevel,
		})
	}
	if value, ok := rluo.mutation.Log(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resultlog.FieldLog,
		})
	}
	if rluo.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resultlog.CommandTable,
			Columns: resultlog.CommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.RemovedCommandIDs(); len(nodes) > 0 && !rluo.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resultlog.CommandTable,
			Columns: resultlog.CommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resultlog.CommandTable,
			Columns: resultlog.CommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResultLog{config: rluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resultlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
