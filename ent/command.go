// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dictor/jaeminbot/ent/command"
)

// Command is the model entity for the Command schema.
type Command struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Keyword holds the value of the "keyword" field.
	Keyword string `json:"keyword,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail string `json:"detail,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommandQuery when eager-loading is set.
	Edges CommandEdges `json:"edges"`
}

// CommandEdges holds the relations/edges for other nodes in the graph.
type CommandEdges struct {
	// Logs holds the value of the logs edge.
	Logs []*ResultLog `json:"logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LogsOrErr returns the Logs value or an error if the edge
// was not loaded in eager-loading.
func (e CommandEdges) LogsOrErr() ([]*ResultLog, error) {
	if e.loadedTypes[0] {
		return e.Logs, nil
	}
	return nil, &NotLoadedError{edge: "logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Command) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case command.FieldID:
			values[i] = new(sql.NullInt64)
		case command.FieldKeyword, command.FieldDetail, command.FieldCreator, command.FieldCode:
			values[i] = new(sql.NullString)
		case command.FieldCreatedAt, command.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Command", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Command fields.
func (c *Command) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case command.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case command.FieldKeyword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keyword", values[i])
			} else if value.Valid {
				c.Keyword = value.String
			}
		case command.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				c.Detail = value.String
			}
		case command.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case command.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case command.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				c.Creator = value.String
			}
		case command.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		}
	}
	return nil
}

// QueryLogs queries the "logs" edge of the Command entity.
func (c *Command) QueryLogs() *ResultLogQuery {
	return (&CommandClient{config: c.config}).QueryLogs(c)
}

// Update returns a builder for updating this Command.
// Note that you need to call Command.Unwrap() before calling this method if this Command
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Command) Update() *CommandUpdateOne {
	return (&CommandClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Command entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Command) Unwrap() *Command {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Command is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Command) String() string {
	var builder strings.Builder
	builder.WriteString("Command(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", keyword=")
	builder.WriteString(c.Keyword)
	builder.WriteString(", detail=")
	builder.WriteString(c.Detail)
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", creator=")
	builder.WriteString(c.Creator)
	builder.WriteString(", code=")
	builder.WriteString(c.Code)
	builder.WriteByte(')')
	return builder.String()
}

// Commands is a parsable slice of Command.
type Commands []*Command

func (c Commands) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
