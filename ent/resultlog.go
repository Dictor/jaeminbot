// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dictor/jaeminbot/ent/resultlog"
)

// ResultLog is the model entity for the ResultLog schema.
type ResultLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Level holds the value of the "level" field.
	Level string `json:"level,omitempty"`
	// Log holds the value of the "log" field.
	Log string `json:"log,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResultLogQuery when eager-loading is set.
	Edges ResultLogEdges `json:"edges"`
}

// ResultLogEdges holds the relations/edges for other nodes in the graph.
type ResultLogEdges struct {
	// Command holds the value of the command edge.
	Command []*Command `json:"command,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CommandOrErr returns the Command value or an error if the edge
// was not loaded in eager-loading.
func (e ResultLogEdges) CommandOrErr() ([]*Command, error) {
	if e.loadedTypes[0] {
		return e.Command, nil
	}
	return nil, &NotLoadedError{edge: "command"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResultLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case resultlog.FieldID:
			values[i] = new(sql.NullInt64)
		case resultlog.FieldLevel, resultlog.FieldLog:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ResultLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResultLog fields.
func (rl *ResultLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resultlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rl.ID = int(value.Int64)
		case resultlog.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				rl.Level = value.String
			}
		case resultlog.FieldLog:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field log", values[i])
			} else if value.Valid {
				rl.Log = value.String
			}
		}
	}
	return nil
}

// QueryCommand queries the "command" edge of the ResultLog entity.
func (rl *ResultLog) QueryCommand() *CommandQuery {
	return (&ResultLogClient{config: rl.config}).QueryCommand(rl)
}

// Update returns a builder for updating this ResultLog.
// Note that you need to call ResultLog.Unwrap() before calling this method if this ResultLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (rl *ResultLog) Update() *ResultLogUpdateOne {
	return (&ResultLogClient{config: rl.config}).UpdateOne(rl)
}

// Unwrap unwraps the ResultLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rl *ResultLog) Unwrap() *ResultLog {
	tx, ok := rl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResultLog is not a transactional entity")
	}
	rl.config.driver = tx.drv
	return rl
}

// String implements the fmt.Stringer.
func (rl *ResultLog) String() string {
	var builder strings.Builder
	builder.WriteString("ResultLog(")
	builder.WriteString(fmt.Sprintf("id=%v", rl.ID))
	builder.WriteString(", level=")
	builder.WriteString(rl.Level)
	builder.WriteString(", log=")
	builder.WriteString(rl.Log)
	builder.WriteByte(')')
	return builder.String()
}

// ResultLogs is a parsable slice of ResultLog.
type ResultLogs []*ResultLog

func (rl ResultLogs) config(cfg config) {
	for _i := range rl {
		rl[_i].config = cfg
	}
}
